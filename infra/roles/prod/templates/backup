#!/bin/bash
set eufo -pipefail

if [ "$(id -u)" != "{{git_user_uid}}" ]; then
   echo "This script must be run as git" 1>&2
   exit 1
fi
# backup

# sauvegarde la base de donnees
rm -rf /srv/backups/camino.sql

docker exec camino_api_db pg_dump --clean --if-exists --format=c --no-owner --no-privileges --dbname=camino > /srv/backups/camino.sql

chown git:users /srv/backups/camino.sql

# sauvegarde les fichiers
rm -rf /srv/backups/files/*

docker cp camino_api_app:/packages/api/files/. /srv/backups/files/

chown git:users -R /srv/backups/files


# cree un fichier d'archive
# cree une archive a partir du dossier `files` et du fichier `camino.sql`

FILE_SUFFIX=camino.tar.gz
FILE_PATH=/srv/backups/`date +%Y%m%d"_"%H%M%S`-$FILE_SUFFIX

FTP_URL="ftp://{{ ftp_user }}:{{ ftp_password }}@{{ ftp_host }}/"

echo $FILE_PATH
cd /srv/backups
tar -zcvf $FILE_PATH files/* camino.sql
cd -

chown git:users /srv/backups/*.tar.gz
# Upload le fichier vers le ftp
curl -aT $FILE_PATH $FTP_URL
# Renome le fichier et écrase l’ancien backup
mv $FILE_PATH /srv/backups/$FILE_SUFFIX
# Vérifie qu’on a seulement les 20 derniers backups sur le ftp
if [ $(curl -l $FTP_URL | grep $FILE_SUFFIX | wc -l) -gt 15 ]
then
	# Supprime le backup le plus ancien
	fileToDelete=$(curl -l $FTP_URL | grep $FILE_SUFFIX | head -n 1)
	curl $FTP_URL -Q "DELE $fileToDelete"
fi

